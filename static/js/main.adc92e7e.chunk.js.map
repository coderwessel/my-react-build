{"version":3,"sources":["components/App.tsx","hooks/useScript.tsx","components/Alarm.tsx","components/CounterSetter.tsx","components/PausePlayButton.tsx","components/ResetButton.tsx","components/Timer.tsx","components/Title.tsx","reportWebVitals.js","index.tsx"],"names":["TimerMode","useScript","url","useEffect","script","document","createElement","src","async","body","appendChild","removeChild","Alarm","audioRef","id","ref","CounterSetter","name","value","onUpdate","className","onClick","PausePlayButton","handler","ResetButton","Timer","paused","minutes","Seconds","seconds","toString","padStart","Minutes","Title","title","height","App","initialState","activeTimer","mode","Session","breakLength","sessionLength","React","updateActiveTimer","newAudioRef","updateBreakLength","updateSessionLength","pauseForTest","a","setTimeout","timer","console","log","newMin","newSec","playAudio","toggleTimerMode","Break","toggleMinutes","updateTimerFunction","clearTimeout","loadedAudio","current","loop","play","alert","stopAudio","pause","currentTime","toggle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.adc92e7e.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport useScript from \"../hooks/useScript\";\r\nimport Alarm from \"./Alarm\";\r\nimport \"./App.css\";\r\nimport CounterSetter from \"./CounterSetter\";\r\nimport PausePlayButton from \"./PausePlayButton\";\r\nimport ResetButton from \"./ResetButton\";\r\nimport Timer from \"./Timer\";\r\nimport Title from \"./Title\";\r\n\r\nenum TimerMode {\r\n  Session,\r\n  Break,\r\n}\r\n\r\nconst App: React.FC = (): JSX.Element => {\r\n  useScript(\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\");\r\n  //use local state\r\n  const initialState = {\r\n    activeTimer: {\r\n      mode: TimerMode.Session,\r\n      paused: true,\r\n      minutes: 25,\r\n      seconds: 0,\r\n    },\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    // alarm: { active: false, started: false },\r\n  };\r\n\r\n  //   const everySecondFunction = () => {\r\n  //     console.log(\"piep\");\r\n  //   };\r\n\r\n  const [activeTimer, updateActiveTimer] = React.useState(\r\n    initialState.activeTimer\r\n  );\r\n\r\n  const newAudioRef: React.RefObject<HTMLAudioElement> = React.createRef();\r\n  const [audioRef, updateAudioRef] = React.useState(newAudioRef);\r\n\r\n  const [breakLength, updateBreakLength] = React.useState(\r\n    initialState.breakLength\r\n  );\r\n\r\n  const [sessionLength, updateSessionLength] = React.useState(\r\n    initialState.sessionLength\r\n  );\r\n\r\n  //   const [alarm, updateAlarm] = React.useState(initialState.alarm);\r\n\r\n  const resetHandler = () => {\r\n    updateSessionLength(initialState.sessionLength);\r\n    updateBreakLength(initialState.breakLength);\r\n    updateActiveTimer({\r\n      paused: true,\r\n      mode: TimerMode.Session,\r\n      minutes: initialState.sessionLength,\r\n      seconds: 0,\r\n    });\r\n    stopAudio();\r\n  };\r\n\r\n  const pausePlayHandler = () => {\r\n    const toggle = activeTimer.paused ? false : true;\r\n    updateActiveTimer({ ...activeTimer, paused: toggle });\r\n    stopAudio();\r\n  };\r\n\r\n  const handlerBreakLength = (value: number) => {\r\n    if (value < 1 || value > 60) return;\r\n    updateBreakLength(value);\r\n    if (activeTimer.paused && activeTimer.mode == TimerMode.Break)\r\n      updateActiveTimer({ ...activeTimer, minutes: value, seconds: 0 });\r\n  };\r\n\r\n  const handlerSessionLength = (value: number) => {\r\n    if (value < 1 || value > 60) return;\r\n    updateSessionLength(value);\r\n    if (activeTimer.paused && activeTimer.mode == TimerMode.Session)\r\n      updateActiveTimer({ ...activeTimer, minutes: value, seconds: 0 });\r\n  };\r\n\r\n  const updateTimerFunction = () => {\r\n    if (activeTimer.paused) {\r\n      console.log(\"paused\");\r\n    } else {\r\n      console.log(\"not paused\");\r\n      const newMin =\r\n        activeTimer.seconds == 0\r\n          ? activeTimer.minutes - 1\r\n          : activeTimer.minutes;\r\n      const newSec = activeTimer.seconds == 0 ? 59 : activeTimer.seconds - 1;\r\n      updateActiveTimer({ ...activeTimer, minutes: newMin, seconds: newSec });\r\n    }\r\n    if (activeTimer.seconds <= 0 && activeTimer.minutes <= 0) {\r\n      //   updateAlarm({ active: true, started: false });\r\n      updateActiveTimer({ ...activeTimer, paused: true });\r\n      try {\r\n        playAudio();\r\n      } finally {\r\n        try {\r\n          pauseForTest();\r\n        } finally {\r\n          const toggleTimerMode =\r\n            activeTimer.mode == TimerMode.Session\r\n              ? TimerMode.Break\r\n              : TimerMode.Session;\r\n          const toggleMinutes =\r\n            toggleTimerMode == TimerMode.Break ? breakLength : sessionLength;\r\n\r\n          updateActiveTimer({\r\n            ...activeTimer,\r\n            minutes: toggleMinutes,\r\n            seconds: 0,\r\n            mode: toggleTimerMode,\r\n            paused: false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const pauseForTest = async () => {\r\n    setTimeout(() => {\r\n      return \"succes\";\r\n    }, 60000);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      updateTimerFunction();\r\n    }, 1000);\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(timer);\r\n  });\r\n\r\n  // use effect to run on startup\r\n  //   React.useEffect(() => {\r\n\r\n  //}, []);\r\n  //acces local state\r\n  // blabla = myStateVar\r\n  //change local state\r\n  //setState(888)\r\n  //read state from redux store\r\n  //const somereduxstoreslice = useAppSelector((state) => state.somereduxstoreslice);\r\n  //write to redux store\r\n  //const dispatch = useAppDispatch();\r\n  //dispatch(update({ textcontent: e.currentTarget.value }));\r\n  //   const updateTimer = (min: number, sec: number) => {\r\n  //     updateActiveTimer({ ...activeTimer, minutes: min, seconds: sec });\r\n  //   };\r\n  //   const handleAlarmEnd = () => {\r\n  //     updateAlarm({ active: false, started: false });\r\n  //   };\r\n\r\n  //   const handleAlarmStart = () => {\r\n  //     updateAlarm({ ...alarm, started: true });\r\n  //   };\r\n\r\n  const playAudio = async () => {\r\n    const loadedAudio = audioRef.current;\r\n    if (loadedAudio) {\r\n      loadedAudio.loop = false;\r\n      //loadedAudio.addEventListener(\"ended\", handleAlarmEnd);\r\n      try {\r\n        loadedAudio.play();\r\n      } catch (Err) {\r\n        alert(\"audio broken\");\r\n      } finally {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopAudio = () => {\r\n    const loadedAudio = audioRef.current;\r\n    if (loadedAudio) {\r\n      loadedAudio.pause();\r\n      loadedAudio.currentTime = 0;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row-center\">\r\n        <Title title=\"My Pomodoro\" />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-2 offset-4\">\r\n          <CounterSetter\r\n            name=\"break\"\r\n            value={breakLength}\r\n            onUpdate={handlerBreakLength}\r\n          />\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <CounterSetter\r\n            name=\"session\"\r\n            value={sessionLength}\r\n            onUpdate={handlerSessionLength}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row-center w-40 mt-1\">\r\n        <div className=\"col-4 offset-4\">\r\n          <Timer\r\n            paused={activeTimer.paused}\r\n            name={activeTimer.mode == TimerMode.Session ? \"Session\" : \"Break\"}\r\n            minutes={activeTimer.minutes}\r\n            seconds={activeTimer.seconds}\r\n          />\r\n        </div>\r\n        <Alarm\r\n          audioRef={audioRef}\r\n          //   active={alarm.active}\r\n          //   handleEnd={handleAlarmEnd}\r\n          //   handleStart={handleAlarmStart}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-2 offset-4 mt-1\">\r\n          <PausePlayButton handler={pausePlayHandler} />\r\n        </div>\r\n        <div className=\"col-2 mt-1\">\r\n          <ResetButton handler={resetHandler} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useEffect } from \"react\";\r\n\r\nconst useScript = (url: string) => {\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n\r\n    script.src = url;\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, [url]);\r\n};\r\n\r\nexport default useScript;\r\n","import * as React from \"react\";\r\nimport \"./Alarm.css\";\r\n\r\ntype IAlarmProps = {\r\n  audioRef: React.RefObject<HTMLAudioElement>;\r\n  //use handeler function if desired\r\n};\r\n\r\nconst Alarm: React.FC<IAlarmProps> = ({ audioRef }) => {\r\n  return (\r\n    <audio\r\n      id=\"beep\"\r\n      ref={audioRef}\r\n      src={process.env.PUBLIC_URL + \"./AudioBeepSound.wav\"}\r\n    />\r\n  );\r\n};\r\n\r\n// type IAlarmProps = {\r\n//   active: boolean;\r\n//   handleEnd(): void;\r\n//   handleStart(): void;\r\n//   //use handeler function if desired\r\n// };\r\n\r\n// const Alarm: React.FC<IAlarmProps> = ({ active, handleEnd, handleStart }) => {\r\n//   const audioRef: React.RefObject<HTMLAudioElement> = React.createRef();\r\n//   const playAudio = () => {\r\n//     const loadedAudio = audioRef.current;\r\n//     if (active && loadedAudio) {\r\n//       loadedAudio.loop = false;\r\n//       loadedAudio.addEventListener(\"ended\", handleEnd);\r\n//       try {\r\n//         loadedAudio.play();\r\n//       } catch (Err) {\r\n//         alert(\"audio broken\");\r\n//       } finally {\r\n//         return;\r\n//       }\r\n//     } else if (loadedAudio) {\r\n//       loadedAudio.pause();\r\n//     }\r\n//   };\r\n//   React.useEffect(() => playAudio());\r\n//   return (\r\n//     <audio\r\n//       id=\"beep\"\r\n//       ref={audioRef}\r\n//       src={process.env.PUBLIC_URL + \"./AudioBeepSound.wav\"}\r\n//     />\r\n//   );\r\n// };\r\n\r\nexport default Alarm;\r\n","import * as React from \"react\";\r\nimport \"./CounterSetter.css\";\r\n//use reducer tools\r\n\r\ntype ICounterSetterProps = {\r\n  name: string;\r\n  value: number;\r\n  onUpdate(val: number): void;\r\n};\r\nconst CounterSetter: React.FC<ICounterSetterProps> = ({\r\n  name,\r\n  value,\r\n  onUpdate,\r\n}) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div id={`${name}-label`} className=\"col-10 offset-1\">\r\n        {name} length\r\n      </div>\r\n      <button\r\n        id={`${name}-increment`}\r\n        className=\"col-10 offset-1 bi bi-arrow-up-square-fill\"\r\n        onClick={() => onUpdate(value + 1)}\r\n      />\r\n      <h2 id={`${name}-length`} className=\"col-10 offset-1 text-center\">\r\n        {value}\r\n      </h2>\r\n      <button\r\n        id={`${name}-decrement`}\r\n        className=\"col-10 offset-1 bi bi-arrow-down-square-fill\"\r\n        onClick={() => onUpdate(value - 1)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default CounterSetter;\r\n","import * as React from \"react\";\r\nimport \"./PausePlayButton.css\";\r\n//use reducer tools\r\n\r\ntype IPausePlayButtonProps = {\r\n  //use handeler function if desired\r\n  handler(): void;\r\n};\r\nconst PausePlayButton: React.FC<IPausePlayButtonProps> = ({ handler }) => {\r\n  return (\r\n    <button id=\"start_stop\" className=\"col-12\" onClick={handler}>\r\n      <i className=\"bi bi-play-circle-fill\" />\r\n      <i className=\"bi bi-pause-circle-fill\" />\r\n    </button>\r\n  );\r\n};\r\nexport default PausePlayButton;\r\n","import * as React from \"react\";\r\nimport \"./ResetButton.css\";\r\n\r\ntype IResetButtonProps = {\r\n  //use handeler function if desired\r\n  handler(): void;\r\n};\r\nconst ResetButton: React.FC<IResetButtonProps> = ({ handler }) => {\r\n  return (\r\n    <button\r\n      id=\"reset\"\r\n      onClick={handler}\r\n      className=\"col-12 bi bi-arrow-repeat\"\r\n    ></button>\r\n  );\r\n};\r\nexport default ResetButton;\r\n","import * as React from \"react\";\r\nimport \"./Timer.css\";\r\n\r\ntype ITimerProps = {\r\n  paused: boolean;\r\n  minutes: number;\r\n  seconds: number;\r\n  name: string;\r\n};\r\n\r\nconst Timer: React.FC<ITimerProps> = ({ paused, name, minutes, seconds }) => {\r\n  const Seconds = seconds.toString().padStart(2, \"0\");\r\n  const Minutes = minutes.toString().padStart(2, \"0\");\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <div className=\"card-body\">\r\n        <h5 id=\"timer-label\" className=\"card-title text-center\">\r\n          {name}\r\n        </h5>\r\n        <p className=\"card-text text-large text-center\">\r\n          <span id=\"time-left\">\r\n            {Minutes}:{Seconds}\r\n          </span>{\" \"}\r\n          {paused ? \" paused\" : \"\"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import * as React from \"react\";\r\nimport \"./Title.css\";\r\n//use reducer tools\r\n\r\ntype ITitleProps = {\r\n  title: string;\r\n  //use handeler function if desired\r\n};\r\nconst Title: React.FC<ITitleProps> = ({ title }) => {\r\n  //use local state\r\n  return (\r\n    <h1 className=\"text-center\">\r\n      {title}\r\n      <img src={process.env.PUBLIC_URL + \"./mini-tomato.svg\"} height=\"75em\" />\r\n    </h1>\r\n  );\r\n};\r\nexport default Title;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import { Provider } from \"react-redux\";\n// import { store } from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n    <App />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}